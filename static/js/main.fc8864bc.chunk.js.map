{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","weatherIcon","temp_celsius","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atomosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc8864bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather=(props)=>{\r\n    return(\r\n        <div className=\"container text-light\">\r\n            <p>(Enter city and country to get the Weather Conditions) <br/> </p>\r\n            <div className=\"cards pt-4\">\r\n                \r\n                <h1>\r\n                    {props.city}\r\n                </h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`} ></i>\r\n                </h5>\r\n                {props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>):null}\r\n                {/*showing min max temperature*/}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction minmaxTemp(min,max){\r\n        if(min && max){\r\n            return(\r\n                <h3>\r\n            <span className=\"px-4\">min temp: {min}&deg;</span>\r\n            <span className=\"px-4\">max temp: {max}&deg;</span>\r\n        </h3>\r\n            );\r\n        }\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form= props=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3 \">\r\n                        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please enter City and Country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\n\nimport './App.css';\n\nimport './weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from \"./app_component/weather.component\";\nimport Form from './app_component/form.component';\n\nconst API_key=\"0ae71e8823b58fd2fce5179a4632cbe5\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city: undefined,\n      state: undefined,\n      icon: undefined,\n      main:undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error:false\n    };\n    \n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atomosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp){\n    let cell=Math.floor(temp-273.15)\n    return cell;\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId>=200&&rangeId<=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId>=300&&rangeId<=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeId>=500&&rangeId<=531:\n          this.setState({icon:this.weatherIcon.Rain});\n          break;\n      case rangeId>=600&&rangeId<=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeId>=701&&rangeId<=781:\n        this.setState({icon:this.weatherIcon.Atomosphere});\n        break;\n      case rangeId===800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeId>=801&&rangeId<=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon:this.weatherIcon.Clouds});\n    }\n  }\n\n  getWeather=async(e)=>{\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;  \n    if(city && country){\n      const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n      const response= await api_call.json();\n      console.log(response);\n\n      this.setState({\n        city:`${response.name},${response.sys.country}`,\n        //celsius:response.main.temp -> {fahrenheit}\n        celsius:this.calCelsius(response.main.temp),\n        temp_max:this.calCelsius(response.main.temp_max),\n        temp_min:this.calCelsius(response.main.temp_min),\n        description:response.weather[0].description,\n        error:false\n      });\n      this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n      }else{\n      this.setState({error:true});\n    }\n\n  };\n\n\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n        <Weather \n          city={this.state.city}\n          country={this.state.country} \n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}